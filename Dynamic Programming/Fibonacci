//using memoization 

// leetcode 509
class Solution {
public:

    int fibHelper(int n,vector<int> &dp){
        // by using memoization technique:to remember func(subproblems) which are already done
        if(n==0) return 0;
        if(n==1) return 1;

        // store the values of subproblems which can reduce space and time and can be used in future
        if(dp[n]!=-1) return dp[n];
        dp[n]=fibHelper(n-1,dp)+fibHelper(n-2,dp);
        return dp[n];
    }
    int fib(int n) {
        vector<int> dp(n+1,-1);
        return fibHelper(n,dp);
    }
};


//using tabulation

// leetcode 509
class Solution {
public:

   
    int fib(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        // using tabulation we store base values and use to solve large problems bottom to up approach
        // vector<int> dp(n+1,-1);
        // dp[0]=0,dp[1]=1;

        // for(int i=2;i<=n;i++){
        //     dp[i]=dp[i-1]+dp[i-2];
        // }
        // return dp[n];
        // the above code is taking O(n) space to reduce we can hold maintain twp variables as the problem itself is to cal the sum prev two values
         int prev_2=0;
         int prev_1=1;
         int curr;
         for(int i=2;i<=n;i++){
            curr=prev_1+prev_2;
            prev_2=prev_1;
            prev_1=curr;
         }
         return curr;
         
        
    }
};
