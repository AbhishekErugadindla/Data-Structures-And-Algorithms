70. Climbing Stairs
Easy

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 


//normal recursion 

class Solution {
public:
int climbStairsHelper(int i){
    
    if(i==1) return 1;
    if(i==0) return 1;

    int left=climbStairsHelper(i-1);
    int right=climbStairsHelper(i-2);

    return left+right;

}
    int climbStairs(int n) {
        
        return climbStairsHelper(n);
        
    }
};

//time will be exceeded


//using memoization dp

class Solution {
public:
int climbStairsHelper(int i,vector<int> &dp){

    if(i==1) return 1;
    if(i==0) return 1;

    if(dp[i]!=-1) return dp[i];
    int left=climbStairsHelper(i-1,dp);
    int right=climbStairsHelper(i-2,dp);
    dp[i]=left+right;
    return dp[i];

    

}
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return climbStairsHelper(n,dp);
        
    }
};
//time complexity:O(n)
//space:O(n)+O(n)

//using tabulation
class Solution {
public:
int climbStairsHelper(int i,vector<int> &dp){

    if(i==1) return 1;
    if(i==0) return 1;
    dp[0]=1;
    dp[1]=1;
    
    for(int j=2;j<=i;j++){
        dp[j]=dp[j-1]+dp[j-2];
    }
    
   
    return dp[i];

    

}
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return climbStairsHelper(n,dp);
        
    }
};
//still space:O(n)

//here in this we will have space :O(1)

class Solution {
public:
int climbStairsHelper(int i){

    if(i==1) return 1;
    if(i==0) return 1;
    int prev_1=1,prev_2=1;
    int curr;
    for(int j=2;j<=i;j++){
        curr=prev_1+prev_2;
        prev_2=prev_1;
        prev_1=curr;
    }
    
   
    return curr;

    

}
    int climbStairs(int n) {
       
        return climbStairsHelper(n);
        
    }
};
