
Problem Statement
Samurai has a grid of chocolates with dimensions M x N. Positioned at the top-left corner (0, 0) is Samurai's friend Charlie, and at the top-right corner (0, N - 1) is his other friend Jack. 

Both friends can move downward, collecting chocolates from the cells they pass through. When a friend passes through a cell, all chocolates in that cell are picked, reducing the count to zero.

Charlie and Jack, when at coordinates (i, j), have the option to move to one of three adjacent cells in the row below: (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1). 

They have to stay inside the grid while moving. If both friends end up in the same cell, only one of them gets the chocolates.

The aim is to find out the most chocolates Samurai can get with the help of his friends, following the given rules for movement.




#include<bits/stdc++.h>
using namespace std;

int maxPath(int i,int j1,int j2,int n,int m,vector<vector<int>>&arr,vector<vector<vector<int>>>&dp){
    if(j1<0||j2<0||j1>m||j2>m) return INT_MIN;
    if(i==n) {
        if(j1==j2) return arr[i][j1];
        return arr[i][j1]+arr[i][j2];
    }
    if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
    int grid_value=j1==j2?arr[i][j1]:arr[i][j1]+arr[i][j2];
    vector<int> c(9);
    c[0]=maxPath(i+1,j1-1,j2-1,n,m,arr,dp);
    c[1]=maxPath(i+1,j1-1,j2,n,m,arr,dp);
    c[2]=maxPath(i+1,j1-1,j2+1,n,m,arr,dp);
    c[3]=maxPath(i+1,j1,j2-1,n,m,arr,dp);
    c[4]=maxPath(i+1,j1,j2,n,m,arr,dp);
    c[5]=maxPath(i+1,j1,j2+1,n,m,arr,dp);
    c[6]=maxPath(i+1,j1+1,j2-1,n,m,arr,dp);
    c[7]=maxPath(i+1,j1+1,j2,n,m,arr,dp);
    c[8]=maxPath(i+1,j1+1,j2+1,n,m,arr,dp);
    
    int maximum=*max_element(c.begin(),c.end());
    return dp[i][j1][j2]=grid_value+maximum;
    
   
}
int main() {
  // write your code here...
  int n,m;
  cin>>n>>m;
  vector<vector<int>> arr(n,vector<int>(m));
  vector<vector<vector<int>>> dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
  for(int i=0;i<n;i++){
      for(int j=0;j<m;j++) cin>>arr[i][j];
  }
  cout<<maxPath(0,0,m-1,n-1,m-1,arr,dp);
  return 0;
}

#include<bits/stdc++.h>
using namespace std;

int maxPath(int i,int j1,int j2,int n,int m,vector<vector<int>>&arr,vector<vector<vector<int>>>&dp){
    if(j1<0||j2<0||j1>m||j2>m) return INT_MIN;
    if(i==n) {
        if(j1==j2) return arr[i][j1];
        return arr[i][j1]+arr[i][j2];
    }
    
    int grid_value=j1==j2?arr[i][j1]:arr[i][j1]+arr[i][j2];
    
    for(int i=n;i>=0;i--){
        for(int j1=0;j1<=m;j1++){
            for(int j2=0;j2<=m;j2++){
                if(i==n){
                    if(j1==j2){ dp[i][j1][j2]=arr[i][j1];}
                   else{ dp[i][j1][j2]=arr[i][j1]+arr[i][j2];}
                }
                else{
                        int grid_value=j1==j2?arr[i][j1]:arr[i][j1]+arr[i][j2];
                        vector<int> c(9,INT_MIN);
                        
                      if(j1-1>=0 &&j2-1>=0)  c[0]=dp[i+1][j1-1][j2-1];
                       if(j1-1>=0) c[1]=dp[i+1][j1-1][j2];
                      if(j1-1>=0 &&j2+1<=m) c[2]=dp[i+1][j1-1][j2+1];
                       if(j2-1>=0)  c[3]=dp[i+1][j1][j2-1];
                        c[4]=dp[i+1][j1][j2];
                       if(j2+1<=m) c[5]=dp[i+1][j1][j2+1];
                        if(j2-1>=0 &&j1+1<=m)  c[6]=dp[i+1][j1+1][j2-1];
                       if(j1+1<=m) c[7]=dp[i+1][j1+1][j2];
                        if(j1+1<=m && j2+1<=m) c[8]=dp[i+1][j1+1][j2+1];
                       
                        int maximum=*max_element(c.begin(),c.end());
                         dp[i][j1][j2]=grid_value+maximum;
                    
                }
            }
        }
    }
   
    
    return dp[0][0][m];
    
   
}
int main() {
  // write your code here...
  int n,m;
  cin>>n>>m;
  vector<vector<int>> arr(n,vector<int>(m));
  vector<vector<vector<int>>> dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
  for(int i=0;i<n;i++){
      for(int j=0;j<m;j++) cin>>arr[i][j];
  }
  cout<<maxPath(0,0,m-1,n-1,m-1,arr,dp);
  return 0;
}


#include<bits/stdc++.h>
using namespace std;

int maxPath(int i,int j1,int j2,int n,int m,vector<vector<int>>&arr){
    if(j1<0||j2<0||j1>m||j2>m) return INT_MIN;
    if(i==n) {
        if(j1==j2) return arr[i][j1];
        return arr[i][j1]+arr[i][j2];
    }
    vector<vector<int>> prev(m+1,vector<int>(m+1));
    vector<vector<int>> curr(m+1,vector<int>(m+1));
    
    int grid_value=j1==j2?arr[i][j1]:arr[i][j1]+arr[i][j2];
    
    for(int i=n;i>=0;i--){
        for(int j1=0;j1<=m;j1++){
            for(int j2=0;j2<=m;j2++){
                if(i==n){
                    if(j1==j2){ curr[j1][j2]=arr[i][j1];}
                   else{ curr[j1][j2]=arr[i][j1]+arr[i][j2];}
                }
                else{
                        int grid_value=j1==j2?arr[i][j1]:arr[i][j1]+arr[i][j2];
                        vector<int> c(9,INT_MIN);
                        
                      if(j1-1>=0 &&j2-1>=0)  c[0]=prev[j1-1][j2-1];
                       if(j1-1>=0) c[1]=prev[j1-1][j2];
                      if(j1-1>=0 &&j2+1<=m) c[2]=prev[j1-1][j2+1];
                       if(j2-1>=0)  c[3]=prev[j1][j2-1];
                        c[4]=prev[j1][j2];
                       if(j2+1<=m) c[5]=prev[j1][j2+1];
                        if(j2-1>=0 &&j1+1<=m)  c[6]=prev[j1+1][j2-1];
                       if(j1+1<=m) c[7]=prev[j1+1][j2];
                        if(j1+1<=m && j2+1<=m) c[8]=prev[j1+1][j2+1];
                       
                        int maximum=*max_element(c.begin(),c.end());
                        curr[j1][j2]=grid_value+maximum;
                    
                }
            }
        }
                    prev=curr;

    }
   
    
    return prev[0][m];
    
   
}
int main() {
  // write your code here...
  int n,m;
  cin>>n>>m;
  vector<vector<int>> arr(n,vector<int>(m));
  for(int i=0;i<n;i++){
      for(int j=0;j<m;j++) cin>>arr[i][j];
  }
  cout<<maxPath(0,0,m-1,n-1,m-1,arr);
  
  
  
  return 0;
}
