64. Minimum Path Sum
Solved
Medium
Topics
Companies
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200



//memoization sc:O(n*m)+O(n*m) tc:O(n*m)
class Solution {
public:
int minPathSumHelper(int i,int j,vector<vector<int>>&arr,vector<vector<int>>&dp){
    if(i<0 || j<0) return INT_MAX;
    if(i==0 && j==0) return arr[i][j];
    
    if(dp[i][j]!=-1) return dp[i][j];
    
    
    int right=minPathSumHelper(i,j-1,arr,dp);
    int down=minPathSumHelper(i-1,j,arr,dp);
    return dp[i][j]=arr[i][j]+min(right,down);
   
    
}
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return minPathSumHelper(n-1,m-1,grid,dp);
    }
};

//tabulation

class Solution {
public:
int minPathSumHelper(int m,int n,vector<vector<int>>&arr,vector<vector<int>>&dp){
      if(m==0 && n==0) return arr[m][n];
    
  
   
   for(int i=0;i<=m;i++){
       for(int j=0;j<=n;j++){
           if(i==0 && j==0) dp[0][0]=arr[0][0];
       
           else{
            int right=INT_MAX,down=INT_MAX;
            if(j>0) right=dp[i][j-1];
            if(i>0) down=dp[i-1][j];
           dp[i][j]=arr[i][j]+min(right,down);}
       }
   }
   return dp[m][n];
   
   
}
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return minPathSumHelper(n-1,m-1,grid,dp);
    }
};
//optimized tabulation

class Solution {
public:
int minPathSumHelper(int m,int n,vector<vector<int>>&arr){
       vector<int> prev(n+1);
 vector<int> curr(n+1);
   
   for(int i=0;i<=m;i++){
       for(int j=0;j<=n;j++){
           if(i==0 && j==0) curr[j]=arr[0][0];
         else{
            int right=INT_MAX,down=INT_MAX;
            if(j>0) right=curr[j-1];
            if(i>0) down=prev[j];
           curr[j]=arr[i][j]+min(right,down);}
       }
       for(int j=0;j<=n;j++) prev[j]=curr[j];
   }
   return curr[n];
}
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        return minPathSumHelper(n-1,m-1,grid);
    }
};
