
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100


memoization:tc:O(m*n) sc:O(m+n)+O(m*n)
class Solution {
public:
   int uniquePaths1(int i,int j,vector<vector<int>> &dp){
    if(i==0 || j==0) return 1;
    if(dp[i][j]!=-1) return dp[i][j];
    int right=uniquePaths1(i,j-1,dp);
    int down=uniquePaths1(i-1,j,dp);
    return dp[i][j]=right+down;
}
    int uniquePaths(int m, int n) {
         vector<vector<int>> dp(m,vector<int>(n,-1));
         return uniquePaths1(m-1,n-1,dp);
    }
};

tabulation:tc:O(m*n) sc:O(m*n)
#include<bits/stdc++.h>
using namespace std;

int uniquePaths(int m,int n,vector<vector<int>> &dp){
    for(int k=0;k<=n;k++) dp[0][k]=1;
    
    for(int i=1;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(j==0){
                dp[i][j]=1;
            }else{
                dp[i][j]=dp[i][j-1]+dp[i-1][j];
            }
        }
    }
    return dp[m][n];
    
}
int main() {
  // write your code here...
  int m,n;
  cin>>m>>n;
  vector<vector<int>> dp(m,vector<int>(n));
  cout<<uniquePaths(m-1,n-1,dp);
  return 0;
}
tabulation:tc:O(m*n) sc:O(n+n)

#include<bits/stdc++.h>
using namespace std;

int uniquePaths(int m,int n){
    vector<int> prior(n+1,1);
    vector<int> curr(n+1);
    for(int i=1;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(j==0){
                curr[j]=1;
            }else{
                curr[j]=curr[j-1]+prior[j];
            }
        }
         for(int j=0;j<=n;j++){
             prior[j]=curr[j];
         }
        
    }
    return curr[n];
    
}
int main() {
  // write your code here...
  int m,n;
  cin>>m>>n;
  cout<<uniquePaths(m-1,n-1);
  return 0;
  
  
  
  
  
}
