
Problem Statement:
Imagine you're a thief trying to steal money from houses on a street.

Each house has some cash, but here's the catch: if you rob two houses next to each other, an alarm goes off and the police get called.

You have an array 'arr' showing how much money is in each house. Your goal is to figure out the best way to rob houses without setting off alarms.

Find the most money you can grab without hitting two houses in a row that are next to each other.


//using normal recursion 
#include<bits/stdc++.h>
using namespace std;

int houseRobber(int i,int arr[]){
    if(i==0) return arr[0];
    if(i==1) return max(arr[0],arr[1]);
    int pick=arr[i]+houseRobber(i-2,arr);
    int not_pick=houseRobber(i-1,arr);
    return max(pick,not_pick);
}
int main() {
  // write your code here...
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++){
      cin>>arr[i];
  }
  cout<<houseRobber(n-1,arr);
  return 0;
}

//dp with memoization

#include<bits/stdc++.h>
using namespace std;

int houseRobber(int i,int arr[],vector<int> &dp){
    if(i==0) return arr[0];
    if(i==1) return max(arr[0],arr[1]);
    if(dp[i]!=-1) return dp[i];
    
    int pick=arr[i]+houseRobber(i-2,arr,dp);
    int not_pick=houseRobber(i-1,arr,dp);
    return dp[i]=max(pick,not_pick);
}
int main() {
  // write your code here...
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++){
      cin>>arr[i];
  }
  vector<int> dp(n,-1);
  cout<<houseRobber(n-1,arr,dp);
  return 0;
}

//tabulation sc:o(n) tc:O(n)

#include<bits/stdc++.h>
using namespace std;

int houseRobber(int i,int arr[],vector<int> &dp){
    if(i==0) return arr[0];
    
   dp[0]=arr[0];
   dp[1]=max(arr[0],arr[1]);
   for(int j=2;j<=i;j++){
       int pick=arr[j]+dp[j-2];
       int not_pick=dp[j-1];
       dp[j]=max(pick,not_pick);
   }
   return dp[i];
}
int main() {
  // write your code here...
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++){
      cin>>arr[i];
  }
  vector<int> dp(n);
  cout<<houseRobber(n-1,arr,dp);
  return 0;
}


//tabulation with space optimization sc:O(1)

#include<bits/stdc++.h>
using namespace std;

int houseRobber(int i,int arr[]){
    if(i==0) return arr[0];
    
   int prev_2=arr[0];
   int prev_1=max(arr[0],arr[1]);
   int maximum=INT_MIN;
   for(int j=2;j<=i;j++){
       int pick=arr[j]+prev_2;
       int not_pick=prev_1;
       maximum=max(pick,not_pick);
       prev_2=prev_1;
       prev_1=maximum;
   }
   return maximum;
}
int main() {
  // write your code here...
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++){
      cin>>arr[i];
  }

  cout<<houseRobber(n-1,arr);
  return 0;
}
