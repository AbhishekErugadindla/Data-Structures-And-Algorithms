

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

//memoization

class Solution {
public:
    int uniquePaths(vector<vector<int>> &obstacleGrid,int i,int j,vector<vector<int>> &dp){
            if(i<0 || j<0) return 0;
            if(obstacleGrid[i][j]==1) return 0;
            if(i==0 &&j==0) return 1;
            if(dp[i][j]!=-1) return dp[i][j];
            int right=uniquePaths(obstacleGrid,i,j-1,dp);
            int down=uniquePaths(obstacleGrid,i-1,j,dp);
            return dp[i][j]=right+down;
        }

    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return uniquePaths(obstacleGrid,m-1,n-1,dp);;

    }
};

//tabulation
class Solution {
public:
    int uniquePaths(vector<vector<int>> &obstacleGrid,int i,int j,vector<vector<int>> &dp){

        for(int m=0;m<=i;m++){
            for(int n=0;n<=j;n++){
                if(obstacleGrid[m][n]==1) dp[m][n]=0;
                else if(m==0 && n==0) dp[m][n]=1;

                else {
                    int right=0,down=0;
                    if(n>0) right=dp[m][n-1];
                    if(m>0) down=dp[m-1][n];
                    dp[m][n]=right+down;
                
                }
                }
            }
            return dp[i][j];
        }

    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        return uniquePaths(obstacleGrid,m-1,n-1,dp);;

    }
};

//tabulation with space optimization
class Solution {
public:
    int uniquePaths(vector<vector<int>> &obstacleGrid,int i,int j){
        vector<int> prev(j+1);
        vector<int> curr(j+1);
        
        

        for(int m=0;m<=i;m++){
            for(int n=0;n<=j;n++){
                if(obstacleGrid[m][n]==1) curr[n]=0;
                else if(m==0 && n==0) curr[n]=1;

                else {
                    int right=0,down=0;
                    if(n>0) right=curr[n-1];
                    if(m>0) down=prev[n];
                    curr[n]=right+down;
                
                }
                }
                 for(int n=0;n<=j;n++){
                    prev[n]=curr[n];
                 }

            }
            return curr[j];
        }

    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        return uniquePaths(obstacleGrid,m-1,n-1);;

    }
};
