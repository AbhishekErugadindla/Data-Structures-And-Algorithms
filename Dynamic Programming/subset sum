
#include<bits/stdc++.h>
using namespace std;
bool subsetSum(int i,int total,vector<int>&arr,vector<vector<int>>&dp){
    if(total==0) return true;
    if(i==0){
        if(arr[i]==total) return true;
        else return false;
    }
    if(dp[i][total]!=-1) return dp[i][total];
    bool pick;
    if(arr[i]>total) pick=false;
     pick=subsetSum(i-1,total-arr[i],arr,dp);
    bool not_pick=subsetSum(i-1,total,arr,dp);
    return dp[i][total]=pick||not_pick;
    
}
int main() {
  // write your code here... 
  int n,k;
  cin>>n>>k;
  vector<int> arr(n);
  vector<vector<int>> dp(n,vector<int>(k+1,-1));
  for(int i=0;i<n;i++) cin>>arr[i];
  cout<<subsetSum(n-1,k,arr,dp);
  
  return 0;
}
#include<bits/stdc++.h>
using namespace std;
bool subsetSum(int n,int total,vector<int>&arr,vector<vector<int>>&dp){
    for(int i=0;i<=n;i++) dp[i][0]=1;
    for(int i=1;i<=total;i++){
                if(total==arr[0]) dp[0][i]=1;
                else dp[0][i]=0;
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=total;j++){
        
                bool not_pick=dp[i-1][j];
                bool pick;
                if(arr[i]>total) pick=0;
                else{
                    pick=dp[i][j-arr[i]];
                }
                dp[i][j]=pick||not_pick;
                
            
        }
        
    }
    return dp[n][total];
    
}
int main() {
  // write your code here... 
  int n,k;
  cin>>n>>k;
  vector<int> arr(n);
  vector<vector<int>> dp(n,vector<int>(k+1));
  for(int i=0;i<n;i++) cin>>arr[i];
  cout<<subsetSum(n-1,k,arr,dp);
  
  return 0;
}

#include<bits/stdc++.h>
using namespace std;
bool subsetSum(int n,int total,vector<int>&arr){
    vector<int> curr(total+1);
    vector<int> prev(total+1);
    
    prev[0]=1;
    curr[0]=1;
    for(int i=1;i<=total;i++){
                if(total==arr[0]) prev[i]=1;
                else prev[i]=0;
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=total;j++){
        
                bool not_pick=prev[j];
                bool pick;
                if(arr[i]>total) pick=0;
                else{
                    pick=prev[j-arr[i]];
                }
               curr[j]=pick||not_pick;
                
            
        }
        prev=curr;
        
    }
    return prev[total];
    
}
int main() {
  // write your code here... 
  int n,k;
  cin>>n>>k;
  vector<int> arr(n);
  vector<vector<int>> dp(n,vector<int>(k+1));
  for(int i=0;i<n;i++) cin>>arr[i];
  cout<<subsetSum(n-1,k,arr);
  
  
  
  
  
  
  return 0;
}
